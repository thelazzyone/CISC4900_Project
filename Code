#Python, Machine Learning, KNN, 5-Fold Testing
#Eddie Lam
#CISC 4900 Project

#now code for KNN on Tensorflow

#34 columns and 21158 rows for 41 users
import sklearn
from sklearn.utils import shuffle
from sklearn.neighbors import KNeighborsClassifier
from sklearn import linear_model, preprocessing

#these are to mess around with columns
from tensorflow import feature_column
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

from __future__ import absolute_import, division, print_function, unicode_literals
import functools

import pandas as pd
import numpy as np
import tensorflow as tf

tf.enable_eager_execution()


FNdataset = pd.read_csv("featMatVersion2_2.csv")

#np.set_printoptions(precision=34, suppress=True)

print(FNdataset.head())     #prints out the table
#print(FNdataset.dtypes)     #prints out the top/label and the type



train, test = train_test_split(FNdataset, test_size=0.2)
print(len(train), 'train example')    #16926
print(len(test), 'test example')      # 4232


""" Creating an input pipeline using tf.data """
#A utility method to create a tf.data dataset from a Pandas Dataframe
def df_to_dataset(FNdataset, shuffle=True, batch_size=34):
  FNdataset = FNdataset.copy()
  lables = FNdataset.pop()                                              #suppose to have 'target' but gettign errors
  ds = tf.data.Dataset.from_tensor_slices((dict(FNdataset), lables))
  if shuffle:
    ds = ds.shuffle(buffer_size=len(FNdataset))
  ds = ds.batch(batch_size)
  return ds

batch_size = 5
train_ds = df_to_dataset(train, batch_size=batch_size)
test_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)


""" Printing and testing the Pipeline"""
for feature_batch, label_batch in train_ds.take(1):
  print('Every feature:', list(feature_batch.keys()))
  print('A batch of User_ID:', feature_batch['User_ID'])
  print('A batch of targets:', label_batch)
