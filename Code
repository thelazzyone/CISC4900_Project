#Python, Machine Learning, KNN, 5-Fold Testing
#Eddie Lam
#CISC 4900 Project

#now code for KNN on Tensorflow

#34 columns and 21158 rows for 41 users

import sklearn
from sklearn.utils import shuffle
from sklearn.neighbors import KNeighborsClassifier
from sklearn import linear_model, preprocessing


from __future__ import absolute_import, division, print_function, unicode_literals
import functools

import pandas as pd
import numpy as np
import tensorflow as tf


filename = pd.read_csv("featMatVersion2_1.csv")
print(filename.head())



#34 lables
column_names = ['User_ID', 'Doc_ID', 'inter-stroke time', 'stroke duration', 'Start X', 'Start Y', 'Stop X', 'Stop Y',
        'Direct end-to-end distance', 'Mean resultant length', 'Up/Down/Left/Right Flag', 'Direction of end-to-end line', 'Phone_ID',
        '20% pairwise velocity', '50% pairwise velocity', '80% pairwise velocity', '20% pairwise acc', '50% pairwise acc', '80% pairwise acc',
        'Medain velocity at least 3pts', 'Largest deviation from end-to-end line', '20% dev. from end-to-end line', '50% dev. from end-to-end line',
        '80% dev. from end-to-end line', 'Average direction', 'Length of trajectory', 'Ratio end-to-end dist. and length of trajectory',
        'Average velocity', 'Medain acceleration at first 5pts', 'Mid-Stroke pressure', 'Mid-Stroke area covered', 'Mid-Stroke finger orientation',
        'change of finger orientation', 'Phone orientation']

batch_size = 25   #amount of data that's gonna be loaded in

#this will load and slice data for me
#creating our dataset
def get_dataset(filename, **kwargs):
  file_dataset = tf.contrib.data.make_csv_dataset(
      filename,
      batch_size,
      column_names = column_names,
      na_values="?",
      num_epochs=1,
      ignore_errors=True,
      **kwargs)
  return dataset

raw_train_data = get_dataset(filename)
raw_test_data = get_dataset(filename)

#show how the data set
def show_batch(dataset):
  for batch, label in dataset.take(1):
    for key, values in batch.items():
      print("{:20s} :  {}".format(key, value.numpy()))
  
  show_batch(raw_train_data)
